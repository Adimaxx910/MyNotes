Complete React Roadmap ðŸ˜„

Here's everything you need to learn ðŸ™Œ

1.Components
â€¢ Functional Components
â€¢ Class Components
â€¢ JSX (JavaScript XML) Syntax

2.Props (Properties)
â€¢ Passing Props
â€¢ Default Props
â€¢ Prop Types

3.State
â€¢ useState Hook
â€¢ Class Component State
â€¢ Immutable State

4.Lifecycle Methods (Class Components)
â€¢ componentDidMount
â€¢ componentDidUpdate
â€¢ componentWillUnmount

5.Hooks (Functional Components)
â€¢ useState
â€¢ useEffect
â€¢ useContext
â€¢ useReducer
â€¢ useCallback
â€¢ useMemo
â€¢ useRef
â€¢ useImperativeHandle
â€¢ useLayoutEffect

6.Event Handling
â€¢ Handling Events in Functional Components
â€¢ Handling Events in Class Components

7.Conditional Rendering
â€¢ if Statements
â€¢ Ternary Operators
â€¢ Logical && Operator

8.Lists and Keys
â€¢ Rendering Lists
â€¢ Keys in React Lists

9.Component Composition
â€¢ Reusing Components
â€¢ Children Props
â€¢ Composition vs Inheritance

10.Higher-Order Components (HOC)
â€¢ Creating HOCs
â€¢ Using HOCs for Reusability

11.Render Props
â€¢ Using Render Props Pattern

12.React Router
â€¢ <BrowserRouter>
â€¢ <Route>
â€¢ <Link>
â€¢ <Switch>
â€¢ Route Parameters

13.Navigation
â€¢ useHistory Hook
â€¢ useLocation Hook

State Management
14.Context API
â€¢ Creating Context
â€¢ useContext Hook

15.Redux
â€¢ Actions
â€¢ Reducers
â€¢ Store
â€¢ connect Function (React-Redux)

16.Forms
â€¢ Handling Form Data
â€¢ Controlled Components
â€¢ Uncontrolled Components

17.Side Effects
â€¢ useEffect for Data Fetching
â€¢ useEffect Cleanup

18.AJAX Requests
â€¢ Fetch API
â€¢ Axios Library

Error Handling
19.Error Boundaries
â€¢ componentDidCatch (Class Components)
â€¢ ErrorBoundary Component (Functional
Components)

20.Testing
â€¢ Jest Testing Framework
â€¢ React Testing Library

21. Best Practices
â€¢ Code Splitting
â€¢ PureComponent and React.memo
â€¢ Avoiding Reconciliation
â€¢ Keys for Dynamic Lists

22.Optimization
â€¢ Memoization
â€¢ Profiling and Performance Monitoring

23. Build and Deployment
â€¢ Create React App (CRA)
â€¢ Production Builds
â€¢ Deployment Strategies

Frameworks and Libraries
24.Styling Libraries
â€¢ Styled-components
â€¢ CSS Modules

25.State Management Libraries
â€¢ Redux
â€¢ MobX

26.Routing Libraries
â€¢ React Router
â€¢ Reach Router

---------------- END -----------------

Best resources to learn React quickly

1.Documentation

Official Updated React Documentation
react.dev
MDN Web Docs
shorturl.at/tCL69

2. YouTube Channel's

â€¢ Traversy Media: https://lnkd.in/ga5zshJa
â€¢ The Net Ninja: youtube.com/c/TheNetNinja
â€¢ FreeCodeCamp: youtube.com/c/FreeCodeCamp
â€¢ Academind: youtube.com/c/Academind

_______________________________________________________________

Project Folder

A typical React JS project folder in Node.js might look like this:

my-react-project/
â”œâ”€â”€ package.json
â”œâ”€â”€ node_modules/
â”œâ”€â”€ src/
â”‚   â”œâ”€â”€ api/
â”‚   â”‚   â”œâ”€â”€ index.js
â”‚   â”‚   â””â”€â”€ user.js
â”‚   â”œâ”€â”€ components/
â”‚   â”‚   â”œâ”€â”€ Avatar.js
â”‚   â”‚   â”œâ”€â”€ Button.js
â”‚   â”‚   â””â”€â”€ Input.js
â”‚   â”œâ”€â”€ context/
â”‚   â”‚   â”œâ”€â”€ AuthContext.js
â”‚   â”‚   â””â”€â”€ UserContext.js
â”‚   â”œâ”€â”€ hooks/
â”‚   â”‚   â”œâ”€â”€ useAuth.js
â”‚   â”‚   â””â”€â”€ useUser.js
â”‚   â”œâ”€â”€ pages/
â”‚   â”‚   â”œâ”€â”€ Home.js
â”‚   â”‚   â”œâ”€â”€ Login.js
â”‚   â”‚   â””â”€â”€ Profile.js
â”‚   â””â”€â”€ index.js
â””â”€â”€ public/
    â”œâ”€â”€ index.html
    â”œâ”€â”€ favicon.ico
    â””â”€â”€ manifest.json
Inside Files

package.json: This file contains metadata about your project, such as its name, version, dependencies, and scripts.
node_modules: This folder contains all of the Node.js packages that your project depends on.
src/: This folder contains all of your source code, including your React components, pages, and other files.
public/: This folder contains all of the static assets that your project needs, such as HTML, CSS, images, and fonts.
Specific Files

src/index.js: This is the entry point for your React application. It renders the root component of your application.
src/pages/index.js: This is the home page of your application.
src/components/Avatar.js: This is a React component that renders an avatar image.
src/context/AuthContext.js: This is a React context that provides authentication information to your application.
src/hooks/useAuth.js: This is a React hook that provides authentication functionality to your application.
Grouping Files

There are two common ways to group files in a React JS project in Node.js:

By feature: This means grouping files together based on the feature of your application that they support. For example, you might have a src/components/ folder for all of your React components, a src/pages/ folder for all of your pages, and a src/context/ folder for all of your React contexts.
By file type: This means grouping files together based on their file type. For example, you might have a src/components/ folder for all of your React components, a src/styles/ folder for all of your CSS files, and a src/scripts/ folder for all of your JavaScript files.

What is ES6?
â€¢ ES6 stands for ECMAScript 6.
â€¢ ECMAScript was created to standardize JavaScript, and ES6 is the 6th version of ECMAScript
 React uses ES6, and you should be familiar with some of the new features like:
â€¢ Classes
â€¢ Arrow Functions
â€¢ Variables (let, const, var)
â€¢ Array Methods like .map()
â€¢ Destructuring
â€¢ Modules
â€¢ Ternary Operator
â€¢ Spread Operator


THIS in Regular Functionnn
_________________________
â€¢ With a regular function, this represents the object that called the function or Class methods:

This In Arrow function
__________________________-
â€¢ With an arrow function, this represents the Header object no matter who called the function:

Array Methods:
const myArray = ['apple', 'banana', 'orangeâ€™];
const myList = myArray.map((item) => <p>{item}</p>)
______________________________________________________________________
                                                               DESTRUCTURING::
		       _________________________________
1.)
const vehicles = ['mustang', 'f-150', 'expeditionâ€™];
const [car, truck, suv] = vehicles;

2.)
const vehicles = ['mustang', 'f-150', 'expeditionâ€™];
const [car,, suv] = vehicles;

3.)
const vehicleOne = { // With destructuring:
brand: 'Fordâ€™,
model: 'Mustangâ€™,
type: 'carâ€™,
year: 2021,
color: 'redâ€™
}
myVehicle(vehicleOne);
function myVehicle({type, color, brand, model}) {
const message = 'My ' + type + ' is a ' + color + ' ' + brand + ' ' + model + '.â€™;
}

4.)We can even destructure deeply nested objects by referencing the nested object then using a colon and curly 
braces to again destructure the items needed from the nested object:
const vehicleOne = {
brand: 'Fordâ€™,
model: 'Mustangâ€™,
type: 'carâ€™,
year: 2021,
color: 'redâ€™,
registration: {
city: 'Houstonâ€™,
state: 'Texasâ€™,
country: 'USAâ€™
}
}
myVehicle(vehicleOne)
function myVehicle({ model, registration: { state } }) {
const message = 'My ' + model + ' is registered in ' + state + '.â€™;
}

                                         		reactJS project creation
				_____________________
1.)	
 		 installing vite
2.)project name
3.)selct react
4.)selct js
5.)now go inside our project folder 
    cd projectname
6.)npm i
    	installing react
7.)install tailwind if u r using Vite framework
	npm install -D tailwindcss postcss autoprefixer
	npx tailwindcss init -p
8.)goto tailwind.config.js file 
	replace it with this..

/** @type {import('tailwindcss').Config} */
export default {
  content: [
    "./index.html",
    "./src/**/*.{js,ts,jsx,tsx}",
  ],
  theme: {
    extend: {},
  },
  plugins: [],
}

9.)create a tailwind.css inside ur src
     and paste these libraries
		@import 'tailwindcss/base';
		@import 'tailwindcss/components';
		@import 'tailwindcss/utilities';
10.)NOW IMPORT THIS TAILWIND.CSS in whichever css file u want to use 
	@import './tailwind.css';

11.)now run the application
	NPM RUN DEV	

12.)to install router inside your project 

		npm install react-router-dom

--------------------------------------------------------------------------------------NAVBAR LINKING::ROUTINGGGGGGGGGGGGGGG
1.) install Routing library
	npm install react-router-dom

2.) import { Link ,NavLink} from 'react-router-dom'


 <nav className='flex w-full justify-between'>
       <div>WDAEF</div>
       <div className=''>
          <ul className='flex justify-between'>
            <li className='mr-3 border border-red-500 bg-blue-600             rounded-md pl-4 pr-4'>
<NavLink to="/" >Home</NavLink></li>
 <li className='mr-3  border border-red-500 bg-blue-600 rounded-md pl-4 pr-4'>
<NavLink to="/Footer" >log</NavLink></li>
<li className='mr-3  border border-red-500 bg-blue-600 rounded-md pl-4 pr-4'>
<NavLink to="/somewher">About</NavLink></li>
          </ul>
       </div>
       <div>DW</div>
 </nav>

3.) In App.jsx ---root file
	import all the route components ,I mean all the page components.
like Home,About ,Login etc.
-->Also import these file s from  router library
-->Create Routes Folder And
--->Create Routes.jsx file inside it..
-->import the
 import { BrowserRouter as Router,Routes,Route,Navigate} from "react-router-dom";
-->>import all the  Route Components  now..
-->  create approuter function like this and export 

	const AppRouter=()=>{
 	   return (
    	    <Router>
     	           <Routes>
        	        	<Route path="/" element={<Header/>}/>
        	        	<Route path="/Footer" element={<Footer/>}/>
         	       	<Route path="/Layout" element={<Layout/>}/>
       	           </Routes>
      	  </Router>
  	  )
	}
	export default AppRouter


--->>now import this Routes file  in App.jsx
	import Routes from './Routes/Routes'
---->function App() {
  const [count, setCount] = useState(0)
  return ( <Routes/> )}
----->now The page will render and navigation will happen...

a.)First all things should be inside Router
b.)ALll page routes should be in Routes
c.)Each page should be in Route Element.

 <Router>
          <Routes>
              <Route path='/' exact Component={Header}></Route>
                <Route path='/footer' Component={Footer}></Route>
          </Routes>
  </Router> 
___________________________________________________
HOW TO PLACE AN ELEMNT AT BOTTOM::tailwind

  <footer className='h-screen w-full flex flex-col '>
        <div className=' mt-auto w-full ' >Welcome to the FOoter Page!                 </div>
  </footer>

_________________________________________________________________Context Api---------------------------------
1.)Create Context file  
   save it in const
   Export it 
          NoteContext.js
	import React, {createContext} from 'react'
	const notecontext=createContext();	
	export default notecontext;
 2.)Create A STate file
	noteState.js
	import the NoteContext.js	 
	define a function called NoteState()
------------------------------------
const NoteState=(props)=>{                  			    /*  <NoteState someProp="Hello" /> --this is how a component will passs the prop*/
    
    const myvariable={
        "name":"Adithya",
        "code":"maxx",
    }
  return(
  						  // You are essentially making the data stored in myvariable accessible to any component
  						  // that is a consumer of the notecontext context. 
    <notecontext.Provider value={myvariable}>  
        {props.children}				//since a component may have multiple child component inside it if we give  {props.children} then all the child components        </notecontext.Provider> 				//inside the parent componet can accesss the CONTEXT...
   )
}

export default NoteState
--------------------------------------------------------------

							json server
					__________________________________________________
1.)Cretae json file 
   and name it
2.)install json server 
  	  npm install -g json-server
3.)run this
	json-server --watch name.json --port 3030
4.)


_____________________________________________________________________Dynamic Icon Importing_____________________________________________
1.)npm install babel-plugin-macros
2.)npm install --save-dev @fortawesome/fontawesome-free
3.)import in main.jsx
	import '@fortawesome/fontawesome-free/css/all.min.css';

______________________________________________________________________TEMPLATE LITERALS_____________________________________________________________________
`/MovieDetails/${props.Id}}`---->in template literals we wont use single quotesor double quotes.
			-->we use  backticks `${}`
________________________________________________________________________IMPortant React  Point______________________________________________________

  const[currentmovidetail,setcurrentmoviedetail]=useState(null)
when the above state is changing fatslyy.then this condition will be besttt for use.....

 if (!currentmovidetail) {
        return <div>Loading...</div>; // Display loading message while fetching data
    }  


__________LOGIN page to dashbooard use Navigation from roter dom.It will work after specifieng condition._____________________________________

